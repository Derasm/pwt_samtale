@using Store.Client.Services
@using Store.Shared.DTO

@* @inject HttpClient Http *@
@inject IProductService ProductService
<PageTitle>Products</PageTitle>
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@* Disables pre-rendering. *@


<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Inventory Checker</h3>
    <div class="flex-grow-1 d-flex justify-content-center ">
        <input type="text" @bind="searchQuery" @oninput="UpdateSearchQuery"
               placeholder="Search products..."
               class="search-input form-control"
        />
    </div>
</div>


@if (products == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover fixed-table">
            <thead class="table-dark">
            <tr>
                <th style="width: 40%;">
                    Product Name
                    <button class="sort-button" @onclick="() => SortTable(nameof(BasicVareDTO.ItemDescription))">
                        @GetSortIcon(nameof(BasicVareDTO.ItemDescription))
                    </button>
                </th>
                <th style="width: 20%;">
                    Suggested Price
                    <button class="sort-button" @onclick="() => SortTable(nameof(BasicVareDTO.SuggestedRetailPrice))">
                        @GetSortIcon(nameof(BasicVareDTO.SuggestedRetailPrice))
                    </button>
                </th>
                <th style="width: 20%;">
                    Category
                    <button class="sort-button" @onclick="() => SortTable(nameof(BasicVareDTO.ItemGroupName))">
                        @GetSortIcon(nameof(BasicVareDTO.ItemGroupName))
                    </button>
                </th>
                <th style="width: 20%;">
                    In Stock?
                    <button class="sort-button" @onclick="() => SortTable(nameof(BasicVareDTO.Quantity))">
                        @GetSortIcon(nameof(BasicVareDTO.Quantity))
                    </button>
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var product in PaginatedProducts)
            {
                <tr>
                    <td>@product.ItemDescription</td>
                    <td>@product.SuggestedRetailPrice - @product.Currency</td>
                    <td>@product.ItemGroupName</td>
                    <td>@GetStockStatus(product)</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <nav aria-label="Product Pagination">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="@PreviousPage">Previous</button>
            </li>
            <li class="page-item">
                <span class="page-link">Page @currentPage of @TotalPages</span>
            </li>
            <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="@NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

@code {

    public List<BasicVareDTO> products;
    
    private string apiUrl = "/products/basic";
    
    //Pagination
    private int currentPage = 1;
    private int pageSize = 17;
    private int defaultProductPages => (int)Math.Ceiling((double)(products?.Count / pageSize));
    private int filteredProductPages => (int)Math.Ceiling(FilteredProducts.Count() / (double)pageSize);
    //we check if searchQuery contains anything. If it does: Use FilteredProducts for calculating. Else use base amount.
    private int TotalPages =>
        FilteredProducts.Any() ? filteredProductPages : defaultProductPages;

    // We skip over x amount of products on each pagination move. 
    // Separate computed property for paginated products
    public IEnumerable<BasicVareDTO> PaginatedProducts =>
        FilteredProducts.Skip((currentPage - 1) * pageSize).Take(pageSize);
    
    //Sorting
    private string? currentSortColumn;
    private bool isAscending = true;
    
    //Searching
    private string searchQuery = "";
    public IEnumerable<BasicVareDTO> FilteredProducts =>
        products?.Where(p =>
            string.IsNullOrEmpty(searchQuery) ||
            (p.ItemDescription?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (p.SuggestedRetailPrice?.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (p.ItemGroupName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false))
        ?? products!;
    // Resets page when searching
    private string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            currentPage = 1; // Reset to first page when filtering
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // products = await Http.GetFromJsonAsync<List<BasicVareDTO>>(apiUrl);
            products = await ProductService.GetAllBasicVare();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }
    // Returns an icon based on amount in stock, and a quantitative number.
    private string GetStockStatus(BasicVareDTO product)
    {
        var pieces = product.Quantity > 1 ? "pieces" : "piece";
        return product.Quantity > 0 ? $" ✅ - {product.Quantity} {pieces}" : " ❌";
    }

    #region  Filtering
    
    // Resets pagination when searching
    private void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        currentPage = 1; // Reset to first page when filtering
    }

    

    #endregion
    
    #region Pagination


    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
    #endregion
    
    #region Sort order
    private void SortTable(string columnName)
    {
        //Bail early option
        if (products.Any())
            return;
        if (currentSortColumn == columnName)
        {
            isAscending = !isAscending; // Toggle order
        }
        else
        {
            currentSortColumn = columnName;
            isAscending = true; // Default to ascending on first click
        }

        // Perform sorting - we use the columnName passed in for the Reflective property.
        if (!products.Any())
        {
            products = isAscending
                ? products.OrderBy(p => GetPropertyValue(p, columnName)).ToList()
                : products.OrderByDescending(p => GetPropertyValue(p, columnName)).ToList();
        }
    }
    
    private object? GetPropertyValue(BasicVareDTO product, string propertyName)
    {
        //We check if there is a property on the BasicVareDTO object with the propertyName, if there is, yoink it.
        var value = typeof(BasicVareDTO).GetProperty(propertyName)?.GetValue(product);

        // If sorting by Quantity (int), ensure it's sorted numerically
        return value is int intValue ? intValue : value;
    }
    
    
    private string GetSortIcon(string columnName)
    {
        if (currentSortColumn != columnName)
            return "➖"; // Default: no sorting applied
        return isAscending ? "↓" : "↑"; // Show sorting direction
    }
    #endregion
}
