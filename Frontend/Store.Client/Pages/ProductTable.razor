@using Store.Shared.DTO

@inject HttpClient Http

<h3>Product List</h3>

@if (products == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>In Stock?</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var product in PaginatedProducts)
            {
                <tr>
                    <td>@product.ItemDescription</td>
                    <td>$@product.SuggestedRetailPrice</td>
                    <td>@product.ItemGroupName</td>
                    <td>@GetStockStatus(product)</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <nav aria-label="Product Pagination">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="@PreviousPage">Previous</button>
            </li>
            <li class="page-item">
                <span class="page-link">Page @currentPage of @TotalPages</span>
            </li>
            <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="@NextPage">Next</button>
            </li>
        </ul>
    </nav>

@code {
    private List<BasicVareDTO>? products;
    private string apiUrl = "/products";
    private int currentPage = 2;
    private int pageSize = 25;
    private int TotalPages => products == null ? 1 : (int)Math.Ceiling(products.Count / (double)pageSize);
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var fullUrl = new Uri(Http.BaseAddress, apiUrl);

            products = await Http.GetFromJsonAsync<List<BasicVareDTO>>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private string GetStockStatus(BasicVareDTO product)
    {
        return product.Quantity > 0 ? "Yes ✅" : "No ❌";
    }
    // We skip over x amount of products on each pagination move. 
    private IEnumerable<BasicVareDTO> PaginatedProducts =>
        products?.Skip((currentPage - 1) * pageSize).Take(pageSize) ?? Enumerable.Empty<BasicVareDTO>();

    private void NextPage()
    {
        Console.WriteLine("NextPage hit");

        if (currentPage < TotalPages)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        Console.WriteLine("PreviousPage hit");
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }
}
